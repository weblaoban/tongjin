'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _extends = _interopDefault(require('babel-runtime/helpers/extends'));
var _Object$keys = _interopDefault(require('babel-runtime/core-js/object/keys'));
var _typeof = _interopDefault(require('babel-runtime/helpers/typeof'));
var _classCallCheck = _interopDefault(require('babel-runtime/helpers/classCallCheck'));
var _createClass = _interopDefault(require('babel-runtime/helpers/createClass'));
var _objectWithoutProperties = _interopDefault(require('babel-runtime/helpers/objectWithoutProperties'));
var linguiFormats = require('lingui-formats');
var _Object$getOwnPropertyNames = _interopDefault(require('babel-runtime/core-js/object/get-own-property-names'));

var isString = function isString(s) {
  return typeof s === 'string';
};
var isFunction = function isFunction(f) {
  return typeof f === 'function';
};
function isEmpty(obj) {
  // null and undefined are "empty"
  if (obj === null || obj === undefined) return true;

  if (obj.length > 0) return false;
  if (obj.length === 0) return true;

  return !_Object$getOwnPropertyNames(obj).length;
}

var defaultFormats = function defaultFormats(language) {
  var languageData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var plurals = languageData.plurals;

  var style = function style(format) {
    return isString(format) ? formats[format] || { style: format } : format;
  };

  var replaceOctothorpe = function replaceOctothorpe(value, message) {
    return function (ctx) {
      var msg = isFunction(message) ? message(ctx) : message;
      var norm = Array.isArray(msg) ? msg : [msg];
      return norm.map(function (m) {
        return isString(m) ? m.replace('#', value) : m;
      });
    };
  };

  return {
    plural: function plural(value, _ref) {
      var _ref$offset = _ref.offset,
          offset = _ref$offset === undefined ? 0 : _ref$offset,
          rules = _objectWithoutProperties(_ref, ['offset']);

      var message = rules[value] || rules[plurals(value - offset)];
      return replaceOctothorpe(value - offset, message);
    },

    selectordinal: function selectordinal(value, _ref2) {
      var _ref2$offset = _ref2.offset,
          offset = _ref2$offset === undefined ? 0 : _ref2$offset,
          rules = _objectWithoutProperties(_ref2, ['offset']);

      var message = rules[value] || rules[plurals(value - offset, true)];
      return replaceOctothorpe(value - offset, message);
    },

    select: function select(value, rules) {
      return rules[value] || rules.other;
    },

    number: function number$$1(value, format) {
      return linguiFormats.number(language, style(format))(value);
    },

    date: function date$$1(value, format) {
      return linguiFormats.date(language, style(format))(value);
    },

    undefined: function undefined(value) {
      return value;
    }
  };
};

// Params -> CTX
/**
 * Creates a context object, which formats ICU MessageFormat arguments based on
 * argument type.
 *
 * @param language     - Language of message
 * @param values       - Parameters for variable interpolation
 * @param languageData - Language data (e.g: plurals)
 * @param formats - Custom format styles
 * @returns {function(string, string, any)}
 */
function context(_ref3) {
  var language = _ref3.language,
      values = _ref3.values,
      formats = _ref3.formats,
      languageData = _ref3.languageData;

  var formatters = defaultFormats(language, languageData, formats);

  var ctx = function ctx(name, type, format) {
    var value = values[name];
    var formatted = formatters[type](value, format);
    var message = isFunction(formatted) ? formatted(ctx) : formatted;
    return Array.isArray(message) ? message.join('') : message;
  };

  return ctx;
}

function interpolate(translation, language, languageData) {
  return function (values) {
    var formats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var message = translation(context({
      language: language, languageData: languageData, formats: formats, values: values
    }));

    return Array.isArray(message) ? message.join('').trim() : message;
  };
}

var flatten = function flatten(arrays) {
  return [].concat.apply([], arrays);
};
var zip = function zip(a, b) {
  return a.map(function (item, index) {
    return [item, b[index]];
  });
};

var t = function t(strings) {
  for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    values[_key - 1] = arguments[_key];
  }

  return flatten(zip(strings, values)).join('');
};

var _plural = function _plural(type) {
  return function (i18n) {
    return function (_ref) {
      var value = _ref.value,
          _ref$offset = _ref.offset,
          offset = _ref$offset === undefined ? 0 : _ref$offset,
          other = _ref.other,
          pluralForms = _objectWithoutProperties(_ref, ['value', 'offset', 'other']);

      var diff = value - offset;
      var translation = pluralForms[value.toString()] || // exact match
      pluralForms[i18n.pluralForm(diff, type)] || // plural form
      other;
      return translation.replace('#', diff.toString());
    };
  };
};

var plural = _plural('cardinal');
var selectOrdinal = _plural('ordinal');

function select(_ref2) {
  var value = _ref2.value,
      other = _ref2.other,
      selectForms = _objectWithoutProperties(_ref2, ['value', 'other']);

  return selectForms[value] || other;
}

function getLanguageData(catalog) {
  return (catalog || {}).languageData || {};
}

function getMessages(catalog) {
  return (catalog || {}).messages || {};
}

var I18n = function () {

  // Message catalogs
  function I18n() {
    _classCallCheck(this, I18n);

    // Messages and languageData are merged on load,
    // so we must initialize it manually
    this._activeMessages = {};
    this._catalogs = {};

    if (process.env.NODE_ENV !== 'production') {
      this.t = t;
      this.select = select;
      this.plural = plural(this);
      this.selectOrdinal = selectOrdinal(this);
    }
  }

  // Messages/langauge data in active language.
  // This is optimization, so we don't perform object lookup
  // _catalogs[language] for each translation.


  _createClass(I18n, [{
    key: '_cacheActiveLanguage',
    value: function _cacheActiveLanguage() {
      var activeCatalog = this._catalogs[this.language];

      var languageData = getLanguageData(activeCatalog);
      if (process.env.NODE_ENV !== 'production') {
        // Allow overriding data in development, useful for testing
        if (isEmpty(languageData) && this._dev && isFunction(this._dev.loadLanguageData)) {
          languageData = this._dev.loadLanguageData(this.language);
        }
      }

      this._activeMessages = getMessages(activeCatalog);
      this._activeLanguageData = languageData;
    }
  }, {
    key: 'load',
    value: function load(catalogs) {
      var _this = this;

      if ((typeof catalogs === 'undefined' ? 'undefined' : _typeof(catalogs)) !== 'object') return;

      // deeply merge Catalogs
      _Object$keys(_extends({}, this._catalogs, catalogs)).forEach(function (language) {
        var compiledMessages = getMessages(catalogs[language]);

        if (process.env.NODE_ENV !== 'production') {
          if (_this._dev && isFunction(_this._dev.compile)) {
            compiledMessages = _Object$keys(compiledMessages).reduce(function (dict, id) {
              var msg = compiledMessages[id];
              dict[id] = isString(msg) ? _this._dev.compile(msg) : msg;
              return dict;
            }, {});
          }
        }

        _this._catalogs[language] = {
          messages: _extends({}, getMessages(_this._catalogs[language]), compiledMessages),
          languageData: _extends({}, getLanguageData(_this._catalogs[language]), getLanguageData(catalogs[language]))
        };
      });

      this._cacheActiveLanguage();
    }
  }, {
    key: 'activate',
    value: function activate(language) {
      if (!language) return;

      if (process.env.NODE_ENV !== 'production') {
        if (this.availableLanguages.indexOf(language) === -1) {
          console.warn('Message catalog for locale "' + language + '" not loaded.');
        }
      }

      this._language = language;
      this._cacheActiveLanguage();
    }
  }, {
    key: 'use',
    value: function use(language) {
      return setupI18n({
        language: language,
        catalogs: this._catalogs,
        development: this._dev
      });
    }

    // default translate method

  }, {
    key: '_',
    value: function _(id) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          defaults = _ref.defaults,
          _ref$values = _ref.values,
          values = _ref$values === undefined ? {} : _ref$values,
          _ref$formats = _ref.formats,
          formats = _ref$formats === undefined ? {} : _ref$formats;

      var translation = this.messages[id] || defaults || id;

      if (process.env.NODE_ENV !== 'production') {
        if (isString(translation) && this._dev && isFunction(this._dev.compile)) {
          translation = this._dev.compile(translation);
        }
      }

      if (typeof translation !== 'function') return translation;
      return interpolate(translation, this.language, this.languageData)(values, formats);
    }
  }, {
    key: 'pluralForm',
    value: function pluralForm(n) {
      var pluralType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'cardinal';

      if (!this.languageData.plurals) return 'other';
      return this.languageData.plurals(n, pluralType === 'ordinal');
    }
  }, {
    key: 'development',
    value: function development(config) {
      this._dev = config;
    }
  }, {
    key: 'availableLanguages',
    get: function get() {
      return _Object$keys(this._catalogs);
    }
  }, {
    key: 'language',
    get: function get() {
      return this._language;
    }
  }, {
    key: 'messages',
    get: function get() {
      return this._activeMessages;
    }
  }, {
    key: 'languageData',
    get: function get() {
      return this._activeLanguageData;
    }
  }]);

  return I18n;
}();

function setupI18n() {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var i18n = new I18n();

  if (process.env.NODE_ENV !== 'production') {
    if (params.development) i18n.development(params.development);
  }

  if (params.catalogs) i18n.load(params.catalogs);
  if (params.language) i18n.activate(params.language);

  return i18n;
}

var i18n = setupI18n();

function unpackCatalog(compiled) {
  return {
    messages: compiled.m,
    languageData: {
      plurals: compiled.l && compiled.l.p
    }
  };
}

var i18nMark = function i18nMark(id) {
  return id;
};

exports.i18nMark = i18nMark;
exports['default'] = i18n;
exports.i18n = i18n;
exports.setupI18n = setupI18n;
exports.unpackCatalog = unpackCatalog;
