import _extends from 'babel-runtime/helpers/extends';
import { parse } from 'messageformat-parser';
import _Object$getOwnPropertyNames from 'babel-runtime/core-js/object/get-own-property-names';
import _slicedToArray from 'babel-runtime/helpers/slicedToArray';
import plurals from 'make-plural/umd/plurals';

var isString = function isString(s) {
  return typeof s === 'string';
};

// [Tokens] -> (CTX -> String)
function processTokens(tokens) {
  var octothorpe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (!tokens.filter(function (token) {
    return !isString(token);
  }).length) {
    return tokens.join('').trim();
  }

  return function (ctx) {
    return tokens.map(function (token) {
      if (isString(token)) {
        return token;

        // # in plural case
      } else if (token.type === 'octothorpe') {
        var name = octothorpe.name,
            _octothorpe$offset = octothorpe.offset,
            _offset = _octothorpe$offset === undefined ? 0 : _octothorpe$offset;

        return ctx(name) - _offset;

        // simple argument
      } else if (token.type === 'argument') {
        return ctx(token.arg);

        // argument with custom format (date, number)
      } else if (token.type === 'function') {
        return ctx(token.arg, token.key, token.params[0]);
      }

      var offset = token.offset ? parseInt(token.offset) : undefined;

      // complex argument with cases
      var formatProps = {};
      token.cases.forEach(function (item) {
        formatProps[item.key] = processTokens(item.tokens, {
          name: token.arg,
          offset: offset
        });
      });

      return ctx(token.arg, token.type, _extends({
        offset: offset
      }, formatProps));
    });
  };
}

// Message -> (Params -> String)
function compile(message) {
  return processTokens(parse(message));
}

var loadLanguageData = (function (locale) {
  if (!locale) {
    return;
  }

  var _locale$split = locale.split('_'),
      _locale$split2 = _slicedToArray(_locale$split, 1),
      language = _locale$split2[0];

  return { plurals: plurals[language] };
});

var index = {
  compile: compile,
  loadLanguageData: loadLanguageData
};

export default index;
